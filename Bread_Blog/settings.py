"""
Django settings for Bread_Blog project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import custom_settings
import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
# 개발인 경우 TRUE, 상용인 경우 FALSE
DEBUG = True

# 개발모드인 경우에는 값을 지정하지 않아도 기본적으로 127.0.0.1가 등록되어 있음. 상용인 경우 서버 도메인이나 IP 등록해야함
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'blog.apps.BlogConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 서버에 요청이 들어올 경우 Bread_Blog/urls.py 파일의 경로부터 분석한다.
ROOT_URLCONF = 'Bread_Blog.urls'

# DIRS 항목에 프로젝트 템플릿 파일이 위치할 폴더 지정. 템플릿 파일을 찾을 때 앱 템플릿 폴더보다 프로젝트 템플릿 폴더를 먼저 검색한다 사실 웹프레임워크를 쓸 경우 필요 없을수도.., os.path.join(BASE_DIR, 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Bread_Blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# 운영으로 넘어갈 경우 Real_DATABASES로 변경
DATABASES = custom_settings.Local_DATABASES


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 'Asia/Seoul' 세계 표준시 UTC에서 한국 시간으로 변경
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

# DB에 저장되는 시간 설정 (USE_TZ = False 로 하면 TIME_ZONE에서 설정한 한국시간으로 설정된다)
# USE_TZ = True
USE_TZ = False


# 장고의 디폴트 설정을 유지하면서 로깅 설정

# logger: 로그 메세지(로그 레코드)를 처리하기 위해 메세지를 담아두는 저장소
# 레벨 순위 CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET -> 높은게 있으면 낮은 메세지는 무시됨
# 로그 레코드 lv >= 로거 lv일 경우에만 메세지 처리

# handler: 로거에 있는 메세지에 무슨 작업을 할지 결정하는 엔진 -> 메세지를 화면이나 파일 혹은 네트워크 소켓 등 어디에 기록할지 로그 동작 정의
# 로그 레코드 lv >= 핸들러 lv일 경우에만 메세지 처리
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S",
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'djangoApp.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'polls': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 앱 정적파일 폴더보다 프로젝트 정적파일 폴더를 우선순위로 검색
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 파일 업로드 폴더 지정
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')